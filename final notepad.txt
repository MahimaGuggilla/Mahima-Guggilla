1. Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib
import seaborn

2. Load the dataset
data = pd.read_csv('titanic.csv')

3. Drop unnecessary columns
data = data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)

4. Fill missing values
data['Age'].fillna(data['Age'].median(), inplace=True)
data['Embarked'].fillna(data['Embarked'].mode()[0], inplace=True)

5. Convert categorical variables to numerical
data = pd.get_dummies(data, columns=['Sex', 'Embarked'], drop_first=True)

6. Split the data into input and output variables
X = data.iloc[:, 1:].values
y = data.iloc[:, 0].values

7. Normalize input data
X = (X - np.mean(X)) / np.std(X)

#make the network structure

8. Define input, hidden, and output layers
input_layer_size = X.shape[1]
hidden_layer_size = 4
output_layer_size = 1

9. Define weights
W1 = np.random.randn(input_layer_size, hidden_layer_size)
W2 = np.random.randn(hidden_layer_size, output_layer_size)

10. Define bias vectors
b1 = np.zeros((1, hidden_layer_size))
b2 = np.zeros((1, output_layer_size))

11. Define sigmoid function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

12.Define forward propagation function
def forward_propagation(X):
    Z1 = np.dot(X, W1) + b1
    A1 = sigmoid(Z1)
    Z2 = np.dot(A1, W2) + b2
    A2 = sigmoid(Z2)
    return A2

13. Define cost function
def cost_function(y_true, y_pred):
 
14. Define accuracy function
def accuracy(y_true, y_pred):
    

15. Define backpropagation function
def backpropagation(X, y_true, y_pred, A1, A2, lr):
    dZ2 = y_pred - y_true
    dW2 = np.dot(A1.T, dZ2)
    db2 = np.sum(dZ2, axis=0, keepdims=True)
    dZ1 = np.dot(dZ2, W2.T) * sigmoid(Z1) * (1 - sigmoid(Z1))
    dW1 = np.dot(X.T, dZ1)
    db1 = np.sum(dZ1, axis=0, keepdims=True)
    
16. Update weights and biases
    W2 -= lr * dW2
    b2 -= lr * db2
    W1 -= lr * dW1
    b1 -= lr * db1

17.Train the model
epochs = 10000
lr = 0.01
for epoch in range(epochs):
    # Forward propagation
    A2 = forward_propagation(X)
    # Backpropagation
    backpropagation(X, y, A2, lr)
    
    # Calculate cost and accuracy
    cost = cost_function(y, A2)
    acc = accuracy(y, A2)
    
    # Print progress
   


